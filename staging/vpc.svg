digraph {
	compound = "true"
	newrank = "true"
	subgraph "root" {
		"[root] aws_codecommit_repository.staging (expand)" [label = "aws_codecommit_repository.staging", shape = "box"]
		"[root] aws_efs_file_system.data (expand)" [label = "aws_efs_file_system.data", shape = "box"]
		"[root] aws_efs_file_system.tools (expand)" [label = "aws_efs_file_system.tools", shape = "box"]
		"[root] aws_eip.forNat (expand)" [label = "aws_eip.forNat", shape = "box"]
		"[root] aws_iam_role.clusteradmin (expand)" [label = "aws_iam_role.clusteradmin", shape = "box"]
		"[root] aws_instance.kitchensinkjenkins (expand)" [label = "aws_instance.kitchensinkjenkins", shape = "box"]
		"[root] aws_instance.monitoring (expand)" [label = "aws_instance.monitoring", shape = "box"]
		"[root] aws_instance.nodeserver (expand)" [label = "aws_instance.nodeserver", shape = "box"]
		"[root] aws_instance.staging-landing (expand)" [label = "aws_instance.staging-landing", shape = "box"]
		"[root] aws_instance.timeseriesdb (expand)" [label = "aws_instance.timeseriesdb", shape = "box"]
		"[root] aws_instance.webserver (expand)" [label = "aws_instance.webserver", shape = "box"]
		"[root] aws_instance.webservice-FE (expand)" [label = "aws_instance.webservice-FE", shape = "box"]
		"[root] aws_internet_gateway.gw (expand)" [label = "aws_internet_gateway.gw", shape = "box"]
		"[root] aws_nat_gateway.PublicAZA (expand)" [label = "aws_nat_gateway.PublicAZA", shape = "box"]
		"[root] aws_network_acl.all (expand)" [label = "aws_network_acl.all", shape = "box"]
		"[root] aws_route_table.private (expand)" [label = "aws_route_table.private", shape = "box"]
		"[root] aws_route_table.public (expand)" [label = "aws_route_table.public", shape = "box"]
		"[root] aws_route_table_association.PrivateAZA (expand)" [label = "aws_route_table_association.PrivateAZA", shape = "box"]
		"[root] aws_route_table_association.PublicAZA (expand)" [label = "aws_route_table_association.PublicAZA", shape = "box"]
		"[root] aws_s3_bucket.logs (expand)" [label = "aws_s3_bucket.logs", shape = "box"]
		"[root] aws_s3_bucket.monitor (expand)" [label = "aws_s3_bucket.monitor", shape = "box"]
		"[root] aws_s3_bucket.templates (expand)" [label = "aws_s3_bucket.templates", shape = "box"]
		"[root] aws_security_group.Bastion (expand)" [label = "aws_security_group.Bastion", shape = "box"]
		"[root] aws_security_group.BuildMon (expand)" [label = "aws_security_group.BuildMon", shape = "box"]
		"[root] aws_security_group.Database (expand)" [label = "aws_security_group.Database", shape = "box"]
		"[root] aws_security_group.FrontEnd (expand)" [label = "aws_security_group.FrontEnd", shape = "box"]
		"[root] aws_subnet.PrivateAZA (expand)" [label = "aws_subnet.PrivateAZA", shape = "box"]
		"[root] aws_subnet.PublicAZA (expand)" [label = "aws_subnet.PublicAZA", shape = "box"]
		"[root] aws_vpc.terraformmain (expand)" [label = "aws_vpc.terraformmain", shape = "box"]
		"[root] data.aws_availability_zones.available (expand)" [label = "data.aws_availability_zones.available", shape = "box"]
		"[root] data.aws_eks_cluster.cluster (expand)" [label = "data.aws_eks_cluster.cluster", shape = "box"]
		"[root] data.aws_eks_cluster_auth.cluster (expand)" [label = "data.aws_eks_cluster_auth.cluster", shape = "box"]
		"[root] module.my-cluster.aws_autoscaling_group.workers (expand)" [label = "module.my-cluster.aws_autoscaling_group.workers", shape = "box"]
		"[root] module.my-cluster.aws_autoscaling_group.workers_launch_template (expand)" [label = "module.my-cluster.aws_autoscaling_group.workers_launch_template", shape = "box"]
		"[root] module.my-cluster.aws_cloudwatch_log_group.this (expand)" [label = "module.my-cluster.aws_cloudwatch_log_group.this", shape = "box"]
		"[root] module.my-cluster.aws_eks_cluster.this (expand)" [label = "module.my-cluster.aws_eks_cluster.this", shape = "box"]
		"[root] module.my-cluster.aws_iam_instance_profile.workers (expand)" [label = "module.my-cluster.aws_iam_instance_profile.workers", shape = "box"]
		"[root] module.my-cluster.aws_iam_instance_profile.workers_launch_template (expand)" [label = "module.my-cluster.aws_iam_instance_profile.workers_launch_template", shape = "box"]
		"[root] module.my-cluster.aws_iam_openid_connect_provider.oidc_provider (expand)" [label = "module.my-cluster.aws_iam_openid_connect_provider.oidc_provider", shape = "box"]
		"[root] module.my-cluster.aws_iam_policy.cluster_elb_sl_role_creation (expand)" [label = "module.my-cluster.aws_iam_policy.cluster_elb_sl_role_creation", shape = "box"]
		"[root] module.my-cluster.aws_iam_role.cluster (expand)" [label = "module.my-cluster.aws_iam_role.cluster", shape = "box"]
		"[root] module.my-cluster.aws_iam_role.workers (expand)" [label = "module.my-cluster.aws_iam_role.workers", shape = "box"]
		"[root] module.my-cluster.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy (expand)" [label = "module.my-cluster.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy", shape = "box"]
		"[root] module.my-cluster.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy (expand)" [label = "module.my-cluster.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy", shape = "box"]
		"[root] module.my-cluster.aws_iam_role_policy_attachment.cluster_AmazonEKSVPCResourceControllerPolicy (expand)" [label = "module.my-cluster.aws_iam_role_policy_attachment.cluster_AmazonEKSVPCResourceControllerPolicy", shape = "box"]
		"[root] module.my-cluster.aws_iam_role_policy_attachment.cluster_elb_sl_role_creation (expand)" [label = "module.my-cluster.aws_iam_role_policy_attachment.cluster_elb_sl_role_creation", shape = "box"]
		"[root] module.my-cluster.aws_iam_role_policy_attachment.workers_AmazonEC2ContainerRegistryReadOnly (expand)" [label = "module.my-cluster.aws_iam_role_policy_attachment.workers_AmazonEC2ContainerRegistryReadOnly", shape = "box"]
		"[root] module.my-cluster.aws_iam_role_policy_attachment.workers_AmazonEKSWorkerNodePolicy (expand)" [label = "module.my-cluster.aws_iam_role_policy_attachment.workers_AmazonEKSWorkerNodePolicy", shape = "box"]
		"[root] module.my-cluster.aws_iam_role_policy_attachment.workers_AmazonEKS_CNI_Policy (expand)" [label = "module.my-cluster.aws_iam_role_policy_attachment.workers_AmazonEKS_CNI_Policy", shape = "box"]
		"[root] module.my-cluster.aws_iam_role_policy_attachment.workers_additional_policies (expand)" [label = "module.my-cluster.aws_iam_role_policy_attachment.workers_additional_policies", shape = "box"]
		"[root] module.my-cluster.aws_launch_configuration.workers (expand)" [label = "module.my-cluster.aws_launch_configuration.workers", shape = "box"]
		"[root] module.my-cluster.aws_launch_template.workers_launch_template (expand)" [label = "module.my-cluster.aws_launch_template.workers_launch_template", shape = "box"]
		"[root] module.my-cluster.aws_security_group.cluster (expand)" [label = "module.my-cluster.aws_security_group.cluster", shape = "box"]
		"[root] module.my-cluster.aws_security_group.workers (expand)" [label = "module.my-cluster.aws_security_group.workers", shape = "box"]
		"[root] module.my-cluster.aws_security_group_rule.cluster_egress_internet (expand)" [label = "module.my-cluster.aws_security_group_rule.cluster_egress_internet", shape = "box"]
		"[root] module.my-cluster.aws_security_group_rule.cluster_https_worker_ingress (expand)" [label = "module.my-cluster.aws_security_group_rule.cluster_https_worker_ingress", shape = "box"]
		"[root] module.my-cluster.aws_security_group_rule.cluster_primary_ingress_workers (expand)" [label = "module.my-cluster.aws_security_group_rule.cluster_primary_ingress_workers", shape = "box"]
		"[root] module.my-cluster.aws_security_group_rule.cluster_private_access_cidrs_source (expand)" [label = "module.my-cluster.aws_security_group_rule.cluster_private_access_cidrs_source", shape = "box"]
		"[root] module.my-cluster.aws_security_group_rule.cluster_private_access_sg_source (expand)" [label = "module.my-cluster.aws_security_group_rule.cluster_private_access_sg_source", shape = "box"]
		"[root] module.my-cluster.aws_security_group_rule.workers_egress_internet (expand)" [label = "module.my-cluster.aws_security_group_rule.workers_egress_internet", shape = "box"]
		"[root] module.my-cluster.aws_security_group_rule.workers_ingress_cluster (expand)" [label = "module.my-cluster.aws_security_group_rule.workers_ingress_cluster", shape = "box"]
		"[root] module.my-cluster.aws_security_group_rule.workers_ingress_cluster_https (expand)" [label = "module.my-cluster.aws_security_group_rule.workers_ingress_cluster_https", shape = "box"]
		"[root] module.my-cluster.aws_security_group_rule.workers_ingress_cluster_kubelet (expand)" [label = "module.my-cluster.aws_security_group_rule.workers_ingress_cluster_kubelet", shape = "box"]
		"[root] module.my-cluster.aws_security_group_rule.workers_ingress_cluster_primary (expand)" [label = "module.my-cluster.aws_security_group_rule.workers_ingress_cluster_primary", shape = "box"]
		"[root] module.my-cluster.aws_security_group_rule.workers_ingress_self (expand)" [label = "module.my-cluster.aws_security_group_rule.workers_ingress_self", shape = "box"]
		"[root] module.my-cluster.data.aws_ami.eks_worker (expand)" [label = "module.my-cluster.data.aws_ami.eks_worker", shape = "box"]
		"[root] module.my-cluster.data.aws_ami.eks_worker_windows (expand)" [label = "module.my-cluster.data.aws_ami.eks_worker_windows", shape = "box"]
		"[root] module.my-cluster.data.aws_caller_identity.current (expand)" [label = "module.my-cluster.data.aws_caller_identity.current", shape = "box"]
		"[root] module.my-cluster.data.aws_iam_instance_profile.custom_worker_group_iam_instance_profile (expand)" [label = "module.my-cluster.data.aws_iam_instance_profile.custom_worker_group_iam_instance_profile", shape = "box"]
		"[root] module.my-cluster.data.aws_iam_instance_profile.custom_worker_group_launch_template_iam_instance_profile (expand)" [label = "module.my-cluster.data.aws_iam_instance_profile.custom_worker_group_launch_template_iam_instance_profile", shape = "box"]
		"[root] module.my-cluster.data.aws_iam_policy_document.cluster_assume_role_policy (expand)" [label = "module.my-cluster.data.aws_iam_policy_document.cluster_assume_role_policy", shape = "box"]
		"[root] module.my-cluster.data.aws_iam_policy_document.cluster_elb_sl_role_creation (expand)" [label = "module.my-cluster.data.aws_iam_policy_document.cluster_elb_sl_role_creation", shape = "box"]
		"[root] module.my-cluster.data.aws_iam_policy_document.workers_assume_role_policy (expand)" [label = "module.my-cluster.data.aws_iam_policy_document.workers_assume_role_policy", shape = "box"]
		"[root] module.my-cluster.data.aws_iam_role.custom_cluster_iam_role (expand)" [label = "module.my-cluster.data.aws_iam_role.custom_cluster_iam_role", shape = "box"]
		"[root] module.my-cluster.data.aws_partition.current (expand)" [label = "module.my-cluster.data.aws_partition.current", shape = "box"]
		"[root] module.my-cluster.data.http.wait_for_cluster (expand)" [label = "module.my-cluster.data.http.wait_for_cluster", shape = "box"]
		"[root] module.my-cluster.kubernetes_config_map.aws_auth (expand)" [label = "module.my-cluster.kubernetes_config_map.aws_auth", shape = "box"]
		"[root] module.my-cluster.local_file.kubeconfig (expand)" [label = "module.my-cluster.local_file.kubeconfig", shape = "box"]
		"[root] module.my-cluster.module.fargate.aws_eks_fargate_profile.this (expand)" [label = "module.my-cluster.module.fargate.aws_eks_fargate_profile.this", shape = "box"]
		"[root] module.my-cluster.module.fargate.aws_iam_role.eks_fargate_pod (expand)" [label = "module.my-cluster.module.fargate.aws_iam_role.eks_fargate_pod", shape = "box"]
		"[root] module.my-cluster.module.fargate.aws_iam_role_policy_attachment.eks_fargate_pod (expand)" [label = "module.my-cluster.module.fargate.aws_iam_role_policy_attachment.eks_fargate_pod", shape = "box"]
		"[root] module.my-cluster.module.fargate.data.aws_iam_policy_document.eks_fargate_pod_assume_role (expand)" [label = "module.my-cluster.module.fargate.data.aws_iam_policy_document.eks_fargate_pod_assume_role", shape = "box"]
		"[root] module.my-cluster.module.fargate.data.aws_iam_role.custom_fargate_iam_role (expand)" [label = "module.my-cluster.module.fargate.data.aws_iam_role.custom_fargate_iam_role", shape = "box"]
		"[root] module.my-cluster.module.fargate.data.aws_partition.current (expand)" [label = "module.my-cluster.module.fargate.data.aws_partition.current", shape = "box"]
		"[root] module.my-cluster.module.node_groups.aws_eks_node_group.workers (expand)" [label = "module.my-cluster.module.node_groups.aws_eks_node_group.workers", shape = "box"]
		"[root] module.my-cluster.module.node_groups.aws_launch_template.workers (expand)" [label = "module.my-cluster.module.node_groups.aws_launch_template.workers", shape = "box"]
		"[root] module.my-cluster.module.node_groups.data.cloudinit_config.workers_userdata (expand)" [label = "module.my-cluster.module.node_groups.data.cloudinit_config.workers_userdata", shape = "box"]
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"]" [label = "provider[\"registry.terraform.io/hashicorp/aws\"]", shape = "diamond"]
		"[root] provider[\"registry.terraform.io/hashicorp/cloudinit\"]" [label = "provider[\"registry.terraform.io/hashicorp/cloudinit\"]", shape = "diamond"]
		"[root] provider[\"registry.terraform.io/hashicorp/kubernetes\"]" [label = "provider[\"registry.terraform.io/hashicorp/kubernetes\"]", shape = "diamond"]
		"[root] provider[\"registry.terraform.io/hashicorp/local\"]" [label = "provider[\"registry.terraform.io/hashicorp/local\"]", shape = "diamond"]
		"[root] provider[\"registry.terraform.io/terraform-aws-modules/http\"]" [label = "provider[\"registry.terraform.io/terraform-aws-modules/http\"]", shape = "diamond"]
		"[root] var.AmiLinux" [label = "var.AmiLinux", shape = "note"]
		"[root] var.DnsZoneName" [label = "var.DnsZoneName", shape = "note"]
		"[root] var.Subnet-Private-AzA-CIDR" [label = "var.Subnet-Private-AzA-CIDR", shape = "note"]
		"[root] var.Subnet-Public-AzA-CIDR" [label = "var.Subnet-Public-AzA-CIDR", shape = "note"]
		"[root] var.amis" [label = "var.amis", shape = "note"]
		"[root] var.asg_desired" [label = "var.asg_desired", shape = "note"]
		"[root] var.asg_max" [label = "var.asg_max", shape = "note"]
		"[root] var.asg_min" [label = "var.asg_min", shape = "note"]
		"[root] var.availability_zones" [label = "var.availability_zones", shape = "note"]
		"[root] var.aws-launch-template-nodeid" [label = "var.aws-launch-template-nodeid", shape = "note"]
		"[root] var.aws_access_key" [label = "var.aws_access_key", shape = "note"]
		"[root] var.aws_secret_key" [label = "var.aws_secret_key", shape = "note"]
		"[root] var.credentialsfile" [label = "var.credentialsfile", shape = "note"]
		"[root] var.instance_type" [label = "var.instance_type", shape = "note"]
		"[root] var.ip_range" [label = "var.ip_range", shape = "note"]
		"[root] var.key_name" [label = "var.key_name", shape = "note"]
		"[root] var.private_subnet_cidr" [label = "var.private_subnet_cidr", shape = "note"]
		"[root] var.public_subnet_cidr" [label = "var.public_subnet_cidr", shape = "note"]
		"[root] var.region" [label = "var.region", shape = "note"]
		"[root] var.vpc-fullcidr" [label = "var.vpc-fullcidr", shape = "note"]
		"[root] var.vpc_cidr" [label = "var.vpc_cidr", shape = "note"]
		"[root] var.webapp_elb_name" [label = "var.webapp_elb_name", shape = "note"]
		"[root] var.webapp_lc_id" [label = "var.webapp_lc_id", shape = "note"]
		"[root] aws_codecommit_repository.staging (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/aws\"]"
		"[root] aws_efs_file_system.data (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/aws\"]"
		"[root] aws_efs_file_system.tools (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/aws\"]"
		"[root] aws_eip.forNat (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/aws\"]"
		"[root] aws_iam_role.clusteradmin (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/aws\"]"
		"[root] aws_instance.kitchensinkjenkins (expand)" -> "[root] aws_security_group.BuildMon (expand)"
		"[root] aws_instance.kitchensinkjenkins (expand)" -> "[root] aws_subnet.PublicAZA (expand)"
		"[root] aws_instance.kitchensinkjenkins (expand)" -> "[root] var.AmiLinux"
		"[root] aws_instance.kitchensinkjenkins (expand)" -> "[root] var.key_name"
		"[root] aws_instance.monitoring (expand)" -> "[root] aws_security_group.FrontEnd (expand)"
		"[root] aws_instance.monitoring (expand)" -> "[root] aws_subnet.PublicAZA (expand)"
		"[root] aws_instance.monitoring (expand)" -> "[root] var.AmiLinux"
		"[root] aws_instance.monitoring (expand)" -> "[root] var.key_name"
		"[root] aws_instance.nodeserver (expand)" -> "[root] aws_security_group.FrontEnd (expand)"
		"[root] aws_instance.nodeserver (expand)" -> "[root] aws_subnet.PublicAZA (expand)"
		"[root] aws_instance.nodeserver (expand)" -> "[root] var.AmiLinux"
		"[root] aws_instance.nodeserver (expand)" -> "[root] var.key_name"
		"[root] aws_instance.staging-landing (expand)" -> "[root] aws_security_group.FrontEnd (expand)"
		"[root] aws_instance.staging-landing (expand)" -> "[root] aws_subnet.PublicAZA (expand)"
		"[root] aws_instance.staging-landing (expand)" -> "[root] var.AmiLinux"
		"[root] aws_instance.staging-landing (expand)" -> "[root] var.key_name"
		"[root] aws_instance.timeseriesdb (expand)" -> "[root] aws_security_group.Database (expand)"
		"[root] aws_instance.timeseriesdb (expand)" -> "[root] aws_subnet.PrivateAZA (expand)"
		"[root] aws_instance.timeseriesdb (expand)" -> "[root] var.AmiLinux"
		"[root] aws_instance.timeseriesdb (expand)" -> "[root] var.key_name"
		"[root] aws_instance.webserver (expand)" -> "[root] aws_security_group.FrontEnd (expand)"
		"[root] aws_instance.webserver (expand)" -> "[root] aws_subnet.PublicAZA (expand)"
		"[root] aws_instance.webserver (expand)" -> "[root] var.AmiLinux"
		"[root] aws_instance.webserver (expand)" -> "[root] var.key_name"
		"[root] aws_instance.webservice-FE (expand)" -> "[root] aws_security_group.FrontEnd (expand)"
		"[root] aws_instance.webservice-FE (expand)" -> "[root] aws_subnet.PublicAZA (expand)"
		"[root] aws_instance.webservice-FE (expand)" -> "[root] var.AmiLinux"
		"[root] aws_instance.webservice-FE (expand)" -> "[root] var.key_name"
		"[root] aws_internet_gateway.gw (expand)" -> "[root] aws_vpc.terraformmain (expand)"
		"[root] aws_nat_gateway.PublicAZA (expand)" -> "[root] aws_eip.forNat (expand)"
		"[root] aws_nat_gateway.PublicAZA (expand)" -> "[root] aws_internet_gateway.gw (expand)"
		"[root] aws_nat_gateway.PublicAZA (expand)" -> "[root] aws_subnet.PublicAZA (expand)"
		"[root] aws_network_acl.all (expand)" -> "[root] aws_vpc.terraformmain (expand)"
		"[root] aws_route_table.private (expand)" -> "[root] aws_nat_gateway.PublicAZA (expand)"
		"[root] aws_route_table.public (expand)" -> "[root] aws_internet_gateway.gw (expand)"
		"[root] aws_route_table_association.PrivateAZA (expand)" -> "[root] aws_route_table.private (expand)"
		"[root] aws_route_table_association.PrivateAZA (expand)" -> "[root] aws_subnet.PrivateAZA (expand)"
		"[root] aws_route_table_association.PublicAZA (expand)" -> "[root] aws_route_table.public (expand)"
		"[root] aws_route_table_association.PublicAZA (expand)" -> "[root] aws_subnet.PublicAZA (expand)"
		"[root] aws_s3_bucket.logs (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/aws\"]"
		"[root] aws_s3_bucket.monitor (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/aws\"]"
		"[root] aws_s3_bucket.templates (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/aws\"]"
		"[root] aws_security_group.Bastion (expand)" -> "[root] aws_security_group.FrontEnd (expand)"
		"[root] aws_security_group.BuildMon (expand)" -> "[root] aws_security_group.FrontEnd (expand)"
		"[root] aws_security_group.Database (expand)" -> "[root] aws_security_group.FrontEnd (expand)"
		"[root] aws_security_group.FrontEnd (expand)" -> "[root] aws_vpc.terraformmain (expand)"
		"[root] aws_subnet.PrivateAZA (expand)" -> "[root] aws_vpc.terraformmain (expand)"
		"[root] aws_subnet.PrivateAZA (expand)" -> "[root] data.aws_availability_zones.available (expand)"
		"[root] aws_subnet.PrivateAZA (expand)" -> "[root] var.Subnet-Private-AzA-CIDR"
		"[root] aws_subnet.PublicAZA (expand)" -> "[root] aws_vpc.terraformmain (expand)"
		"[root] aws_subnet.PublicAZA (expand)" -> "[root] data.aws_availability_zones.available (expand)"
		"[root] aws_subnet.PublicAZA (expand)" -> "[root] var.Subnet-Public-AzA-CIDR"
		"[root] aws_vpc.terraformmain (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/aws\"]"
		"[root] aws_vpc.terraformmain (expand)" -> "[root] var.vpc-fullcidr"
		"[root] data.aws_availability_zones.available (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/aws\"]"
		"[root] data.aws_eks_cluster.cluster (expand)" -> "[root] module.my-cluster.output.cluster_id (expand)"
		"[root] data.aws_eks_cluster_auth.cluster (expand)" -> "[root] module.my-cluster.output.cluster_id (expand)"
		"[root] meta.count-boundary (EachMode fixup)" -> "[root] aws_codecommit_repository.staging (expand)"
		"[root] meta.count-boundary (EachMode fixup)" -> "[root] aws_efs_file_system.data (expand)"
		"[root] meta.count-boundary (EachMode fixup)" -> "[root] aws_efs_file_system.tools (expand)"
		"[root] meta.count-boundary (EachMode fixup)" -> "[root] aws_iam_role.clusteradmin (expand)"
		"[root] meta.count-boundary (EachMode fixup)" -> "[root] aws_instance.kitchensinkjenkins (expand)"
		"[root] meta.count-boundary (EachMode fixup)" -> "[root] aws_instance.monitoring (expand)"
		"[root] meta.count-boundary (EachMode fixup)" -> "[root] aws_instance.nodeserver (expand)"
		"[root] meta.count-boundary (EachMode fixup)" -> "[root] aws_instance.staging-landing (expand)"
		"[root] meta.count-boundary (EachMode fixup)" -> "[root] aws_instance.timeseriesdb (expand)"
		"[root] meta.count-boundary (EachMode fixup)" -> "[root] aws_instance.webserver (expand)"
		"[root] meta.count-boundary (EachMode fixup)" -> "[root] aws_instance.webservice-FE (expand)"
		"[root] meta.count-boundary (EachMode fixup)" -> "[root] aws_network_acl.all (expand)"
		"[root] meta.count-boundary (EachMode fixup)" -> "[root] aws_route_table_association.PrivateAZA (expand)"
		"[root] meta.count-boundary (EachMode fixup)" -> "[root] aws_route_table_association.PublicAZA (expand)"
		"[root] meta.count-boundary (EachMode fixup)" -> "[root] aws_s3_bucket.logs (expand)"
		"[root] meta.count-boundary (EachMode fixup)" -> "[root] aws_s3_bucket.monitor (expand)"
		"[root] meta.count-boundary (EachMode fixup)" -> "[root] aws_s3_bucket.templates (expand)"
		"[root] meta.count-boundary (EachMode fixup)" -> "[root] aws_security_group.Bastion (expand)"
		"[root] meta.count-boundary (EachMode fixup)" -> "[root] module.my-cluster (close)"
		"[root] meta.count-boundary (EachMode fixup)" -> "[root] var.DnsZoneName"
		"[root] meta.count-boundary (EachMode fixup)" -> "[root] var.amis"
		"[root] meta.count-boundary (EachMode fixup)" -> "[root] var.asg_desired"
		"[root] meta.count-boundary (EachMode fixup)" -> "[root] var.asg_max"
		"[root] meta.count-boundary (EachMode fixup)" -> "[root] var.asg_min"
		"[root] meta.count-boundary (EachMode fixup)" -> "[root] var.availability_zones"
		"[root] meta.count-boundary (EachMode fixup)" -> "[root] var.aws-launch-template-nodeid"
		"[root] meta.count-boundary (EachMode fixup)" -> "[root] var.instance_type"
		"[root] meta.count-boundary (EachMode fixup)" -> "[root] var.ip_range"
		"[root] meta.count-boundary (EachMode fixup)" -> "[root] var.private_subnet_cidr"
		"[root] meta.count-boundary (EachMode fixup)" -> "[root] var.public_subnet_cidr"
		"[root] meta.count-boundary (EachMode fixup)" -> "[root] var.vpc_cidr"
		"[root] meta.count-boundary (EachMode fixup)" -> "[root] var.webapp_elb_name"
		"[root] meta.count-boundary (EachMode fixup)" -> "[root] var.webapp_lc_id"
		"[root] module.my-cluster (close)" -> "[root] module.my-cluster.aws_iam_role_policy_attachment.cluster_elb_sl_role_creation (expand)"
		"[root] module.my-cluster (close)" -> "[root] module.my-cluster.module.fargate (close)"
		"[root] module.my-cluster (close)" -> "[root] module.my-cluster.module.node_groups (close)"
		"[root] module.my-cluster (close)" -> "[root] module.my-cluster.output.cloudwatch_log_group_arn (expand)"
		"[root] module.my-cluster (close)" -> "[root] module.my-cluster.output.cloudwatch_log_group_name (expand)"
		"[root] module.my-cluster (close)" -> "[root] module.my-cluster.output.cluster_arn (expand)"
		"[root] module.my-cluster (close)" -> "[root] module.my-cluster.output.cluster_certificate_authority_data (expand)"
		"[root] module.my-cluster (close)" -> "[root] module.my-cluster.output.cluster_endpoint (expand)"
		"[root] module.my-cluster (close)" -> "[root] module.my-cluster.output.cluster_iam_role_arn (expand)"
		"[root] module.my-cluster (close)" -> "[root] module.my-cluster.output.cluster_iam_role_name (expand)"
		"[root] module.my-cluster (close)" -> "[root] module.my-cluster.output.cluster_oidc_issuer_url (expand)"
		"[root] module.my-cluster (close)" -> "[root] module.my-cluster.output.cluster_primary_security_group_id (expand)"
		"[root] module.my-cluster (close)" -> "[root] module.my-cluster.output.cluster_security_group_id (expand)"
		"[root] module.my-cluster (close)" -> "[root] module.my-cluster.output.cluster_version (expand)"
		"[root] module.my-cluster (close)" -> "[root] module.my-cluster.output.config_map_aws_auth (expand)"
		"[root] module.my-cluster (close)" -> "[root] module.my-cluster.output.fargate_iam_role_arn (expand)"
		"[root] module.my-cluster (close)" -> "[root] module.my-cluster.output.fargate_iam_role_name (expand)"
		"[root] module.my-cluster (close)" -> "[root] module.my-cluster.output.fargate_profile_arns (expand)"
		"[root] module.my-cluster (close)" -> "[root] module.my-cluster.output.fargate_profile_ids (expand)"
		"[root] module.my-cluster (close)" -> "[root] module.my-cluster.output.kubeconfig (expand)"
		"[root] module.my-cluster (close)" -> "[root] module.my-cluster.output.kubeconfig_filename (expand)"
		"[root] module.my-cluster (close)" -> "[root] module.my-cluster.output.node_groups (expand)"
		"[root] module.my-cluster (close)" -> "[root] module.my-cluster.output.oidc_provider_arn (expand)"
		"[root] module.my-cluster (close)" -> "[root] module.my-cluster.output.security_group_rule_cluster_https_worker_ingress (expand)"
		"[root] module.my-cluster (close)" -> "[root] module.my-cluster.output.worker_iam_instance_profile_arns (expand)"
		"[root] module.my-cluster (close)" -> "[root] module.my-cluster.output.worker_iam_instance_profile_names (expand)"
		"[root] module.my-cluster (close)" -> "[root] module.my-cluster.output.worker_iam_role_arn (expand)"
		"[root] module.my-cluster (close)" -> "[root] module.my-cluster.output.worker_iam_role_name (expand)"
		"[root] module.my-cluster (close)" -> "[root] module.my-cluster.output.worker_security_group_id (expand)"
		"[root] module.my-cluster (close)" -> "[root] module.my-cluster.output.workers_asg_arns (expand)"
		"[root] module.my-cluster (close)" -> "[root] module.my-cluster.output.workers_asg_names (expand)"
		"[root] module.my-cluster (close)" -> "[root] module.my-cluster.output.workers_default_ami_id (expand)"
		"[root] module.my-cluster (close)" -> "[root] module.my-cluster.output.workers_default_ami_id_windows (expand)"
		"[root] module.my-cluster (close)" -> "[root] module.my-cluster.output.workers_launch_template_arns (expand)"
		"[root] module.my-cluster (close)" -> "[root] module.my-cluster.output.workers_launch_template_ids (expand)"
		"[root] module.my-cluster (close)" -> "[root] module.my-cluster.output.workers_launch_template_latest_versions (expand)"
		"[root] module.my-cluster (close)" -> "[root] module.my-cluster.output.workers_user_data (expand)"
		"[root] module.my-cluster.aws_autoscaling_group.workers (expand)" -> "[root] module.my-cluster.aws_launch_configuration.workers (expand)"
		"[root] module.my-cluster.aws_autoscaling_group.workers (expand)" -> "[root] module.my-cluster.var.worker_create_initial_lifecycle_hooks (expand)"
		"[root] module.my-cluster.aws_autoscaling_group.workers_launch_template (expand)" -> "[root] module.my-cluster.aws_launch_template.workers_launch_template (expand)"
		"[root] module.my-cluster.aws_autoscaling_group.workers_launch_template (expand)" -> "[root] module.my-cluster.var.worker_create_initial_lifecycle_hooks (expand)"
		"[root] module.my-cluster.aws_cloudwatch_log_group.this (expand)" -> "[root] module.my-cluster.var.cluster_enabled_log_types (expand)"
		"[root] module.my-cluster.aws_cloudwatch_log_group.this (expand)" -> "[root] module.my-cluster.var.cluster_log_kms_key_id (expand)"
		"[root] module.my-cluster.aws_cloudwatch_log_group.this (expand)" -> "[root] module.my-cluster.var.cluster_log_retention_in_days (expand)"
		"[root] module.my-cluster.aws_cloudwatch_log_group.this (expand)" -> "[root] module.my-cluster.var.cluster_name (expand)"
		"[root] module.my-cluster.aws_cloudwatch_log_group.this (expand)" -> "[root] module.my-cluster.var.create_eks (expand)"
		"[root] module.my-cluster.aws_cloudwatch_log_group.this (expand)" -> "[root] module.my-cluster.var.tags (expand)"
		"[root] module.my-cluster.aws_cloudwatch_log_group.this (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/aws\"]"
		"[root] module.my-cluster.aws_eks_cluster.this (expand)" -> "[root] module.my-cluster.aws_cloudwatch_log_group.this (expand)"
		"[root] module.my-cluster.aws_eks_cluster.this (expand)" -> "[root] module.my-cluster.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy (expand)"
		"[root] module.my-cluster.aws_eks_cluster.this (expand)" -> "[root] module.my-cluster.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy (expand)"
		"[root] module.my-cluster.aws_eks_cluster.this (expand)" -> "[root] module.my-cluster.aws_iam_role_policy_attachment.cluster_AmazonEKSVPCResourceControllerPolicy (expand)"
		"[root] module.my-cluster.aws_eks_cluster.this (expand)" -> "[root] module.my-cluster.aws_security_group_rule.cluster_egress_internet (expand)"
		"[root] module.my-cluster.aws_eks_cluster.this (expand)" -> "[root] module.my-cluster.aws_security_group_rule.cluster_https_worker_ingress (expand)"
		"[root] module.my-cluster.aws_eks_cluster.this (expand)" -> "[root] module.my-cluster.local.cluster_iam_role_arn (expand)"
		"[root] module.my-cluster.aws_eks_cluster.this (expand)" -> "[root] module.my-cluster.var.cluster_create_timeout (expand)"
		"[root] module.my-cluster.aws_eks_cluster.this (expand)" -> "[root] module.my-cluster.var.cluster_delete_timeout (expand)"
		"[root] module.my-cluster.aws_eks_cluster.this (expand)" -> "[root] module.my-cluster.var.cluster_encryption_config (expand)"
		"[root] module.my-cluster.aws_eks_cluster.this (expand)" -> "[root] module.my-cluster.var.cluster_endpoint_private_access (expand)"
		"[root] module.my-cluster.aws_eks_cluster.this (expand)" -> "[root] module.my-cluster.var.cluster_endpoint_public_access (expand)"
		"[root] module.my-cluster.aws_eks_cluster.this (expand)" -> "[root] module.my-cluster.var.cluster_endpoint_public_access_cidrs (expand)"
		"[root] module.my-cluster.aws_eks_cluster.this (expand)" -> "[root] module.my-cluster.var.cluster_service_ipv4_cidr (expand)"
		"[root] module.my-cluster.aws_eks_cluster.this (expand)" -> "[root] module.my-cluster.var.cluster_tags (expand)"
		"[root] module.my-cluster.aws_eks_cluster.this (expand)" -> "[root] module.my-cluster.var.cluster_update_timeout (expand)"
		"[root] module.my-cluster.aws_eks_cluster.this (expand)" -> "[root] module.my-cluster.var.cluster_version (expand)"
		"[root] module.my-cluster.aws_eks_cluster.this (expand)" -> "[root] module.my-cluster.var.subnets (expand)"
		"[root] module.my-cluster.aws_iam_instance_profile.workers (expand)" -> "[root] module.my-cluster.local.default_iam_role_id (expand)"
		"[root] module.my-cluster.aws_iam_instance_profile.workers (expand)" -> "[root] module.my-cluster.local.worker_group_launch_configuration_count (expand)"
		"[root] module.my-cluster.aws_iam_instance_profile.workers_launch_template (expand)" -> "[root] module.my-cluster.local.default_iam_role_id (expand)"
		"[root] module.my-cluster.aws_iam_instance_profile.workers_launch_template (expand)" -> "[root] module.my-cluster.local.worker_group_launch_template_count (expand)"
		"[root] module.my-cluster.aws_iam_openid_connect_provider.oidc_provider (expand)" -> "[root] module.my-cluster.local.client_id_list (expand)"
		"[root] module.my-cluster.aws_iam_openid_connect_provider.oidc_provider (expand)" -> "[root] module.my-cluster.local.cluster_oidc_issuer_url (expand)"
		"[root] module.my-cluster.aws_iam_openid_connect_provider.oidc_provider (expand)" -> "[root] module.my-cluster.var.eks_oidc_root_ca_thumbprint (expand)"
		"[root] module.my-cluster.aws_iam_openid_connect_provider.oidc_provider (expand)" -> "[root] module.my-cluster.var.enable_irsa (expand)"
		"[root] module.my-cluster.aws_iam_policy.cluster_elb_sl_role_creation (expand)" -> "[root] module.my-cluster.data.aws_iam_policy_document.cluster_elb_sl_role_creation (expand)"
		"[root] module.my-cluster.aws_iam_policy.cluster_elb_sl_role_creation (expand)" -> "[root] module.my-cluster.var.cluster_name (expand)"
		"[root] module.my-cluster.aws_iam_policy.cluster_elb_sl_role_creation (expand)" -> "[root] module.my-cluster.var.iam_path (expand)"
		"[root] module.my-cluster.aws_iam_policy.cluster_elb_sl_role_creation (expand)" -> "[root] module.my-cluster.var.tags (expand)"
		"[root] module.my-cluster.aws_iam_role.cluster (expand)" -> "[root] module.my-cluster.data.aws_iam_policy_document.cluster_assume_role_policy (expand)"
		"[root] module.my-cluster.aws_iam_role.cluster (expand)" -> "[root] module.my-cluster.var.cluster_iam_role_name (expand)"
		"[root] module.my-cluster.aws_iam_role.cluster (expand)" -> "[root] module.my-cluster.var.cluster_name (expand)"
		"[root] module.my-cluster.aws_iam_role.cluster (expand)" -> "[root] module.my-cluster.var.create_eks (expand)"
		"[root] module.my-cluster.aws_iam_role.cluster (expand)" -> "[root] module.my-cluster.var.iam_path (expand)"
		"[root] module.my-cluster.aws_iam_role.cluster (expand)" -> "[root] module.my-cluster.var.manage_cluster_iam_resources (expand)"
		"[root] module.my-cluster.aws_iam_role.cluster (expand)" -> "[root] module.my-cluster.var.permissions_boundary (expand)"
		"[root] module.my-cluster.aws_iam_role.cluster (expand)" -> "[root] module.my-cluster.var.tags (expand)"
		"[root] module.my-cluster.aws_iam_role.workers (expand)" -> "[root] module.my-cluster.data.aws_iam_policy_document.workers_assume_role_policy (expand)"
		"[root] module.my-cluster.aws_iam_role.workers (expand)" -> "[root] module.my-cluster.local.cluster_name (expand)"
		"[root] module.my-cluster.aws_iam_role.workers (expand)" -> "[root] module.my-cluster.var.manage_worker_iam_resources (expand)"
		"[root] module.my-cluster.aws_iam_role.workers (expand)" -> "[root] module.my-cluster.var.workers_role_name (expand)"
		"[root] module.my-cluster.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy (expand)" -> "[root] module.my-cluster.local.cluster_iam_role_name (expand)"
		"[root] module.my-cluster.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy (expand)" -> "[root] module.my-cluster.local.policy_arn_prefix (expand)"
		"[root] module.my-cluster.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy (expand)" -> "[root] module.my-cluster.local.cluster_iam_role_name (expand)"
		"[root] module.my-cluster.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy (expand)" -> "[root] module.my-cluster.local.policy_arn_prefix (expand)"
		"[root] module.my-cluster.aws_iam_role_policy_attachment.cluster_AmazonEKSVPCResourceControllerPolicy (expand)" -> "[root] module.my-cluster.local.cluster_iam_role_name (expand)"
		"[root] module.my-cluster.aws_iam_role_policy_attachment.cluster_AmazonEKSVPCResourceControllerPolicy (expand)" -> "[root] module.my-cluster.local.policy_arn_prefix (expand)"
		"[root] module.my-cluster.aws_iam_role_policy_attachment.cluster_elb_sl_role_creation (expand)" -> "[root] module.my-cluster.aws_iam_policy.cluster_elb_sl_role_creation (expand)"
		"[root] module.my-cluster.aws_iam_role_policy_attachment.cluster_elb_sl_role_creation (expand)" -> "[root] module.my-cluster.local.cluster_iam_role_name (expand)"
		"[root] module.my-cluster.aws_iam_role_policy_attachment.workers_AmazonEC2ContainerRegistryReadOnly (expand)" -> "[root] module.my-cluster.aws_iam_role.workers (expand)"
		"[root] module.my-cluster.aws_iam_role_policy_attachment.workers_AmazonEKSWorkerNodePolicy (expand)" -> "[root] module.my-cluster.aws_iam_role.workers (expand)"
		"[root] module.my-cluster.aws_iam_role_policy_attachment.workers_AmazonEKS_CNI_Policy (expand)" -> "[root] module.my-cluster.aws_iam_role.workers (expand)"
		"[root] module.my-cluster.aws_iam_role_policy_attachment.workers_AmazonEKS_CNI_Policy (expand)" -> "[root] module.my-cluster.var.attach_worker_cni_policy (expand)"
		"[root] module.my-cluster.aws_iam_role_policy_attachment.workers_additional_policies (expand)" -> "[root] module.my-cluster.aws_iam_role.workers (expand)"
		"[root] module.my-cluster.aws_iam_role_policy_attachment.workers_additional_policies (expand)" -> "[root] module.my-cluster.var.workers_additional_policies (expand)"
		"[root] module.my-cluster.aws_launch_configuration.workers (expand)" -> "[root] module.my-cluster.aws_iam_instance_profile.workers (expand)"
		"[root] module.my-cluster.aws_launch_configuration.workers (expand)" -> "[root] module.my-cluster.aws_iam_role_policy_attachment.workers_AmazonEC2ContainerRegistryReadOnly (expand)"
		"[root] module.my-cluster.aws_launch_configuration.workers (expand)" -> "[root] module.my-cluster.aws_iam_role_policy_attachment.workers_AmazonEKSWorkerNodePolicy (expand)"
		"[root] module.my-cluster.aws_launch_configuration.workers (expand)" -> "[root] module.my-cluster.aws_iam_role_policy_attachment.workers_AmazonEKS_CNI_Policy (expand)"
		"[root] module.my-cluster.aws_launch_configuration.workers (expand)" -> "[root] module.my-cluster.aws_iam_role_policy_attachment.workers_additional_policies (expand)"
		"[root] module.my-cluster.aws_launch_configuration.workers (expand)" -> "[root] module.my-cluster.aws_security_group_rule.cluster_primary_ingress_workers (expand)"
		"[root] module.my-cluster.aws_launch_configuration.workers (expand)" -> "[root] module.my-cluster.aws_security_group_rule.workers_egress_internet (expand)"
		"[root] module.my-cluster.aws_launch_configuration.workers (expand)" -> "[root] module.my-cluster.aws_security_group_rule.workers_ingress_cluster (expand)"
		"[root] module.my-cluster.aws_launch_configuration.workers (expand)" -> "[root] module.my-cluster.aws_security_group_rule.workers_ingress_cluster_https (expand)"
		"[root] module.my-cluster.aws_launch_configuration.workers (expand)" -> "[root] module.my-cluster.aws_security_group_rule.workers_ingress_cluster_kubelet (expand)"
		"[root] module.my-cluster.aws_launch_configuration.workers (expand)" -> "[root] module.my-cluster.aws_security_group_rule.workers_ingress_cluster_primary (expand)"
		"[root] module.my-cluster.aws_launch_configuration.workers (expand)" -> "[root] module.my-cluster.aws_security_group_rule.workers_ingress_self (expand)"
		"[root] module.my-cluster.aws_launch_configuration.workers (expand)" -> "[root] module.my-cluster.data.aws_iam_instance_profile.custom_worker_group_iam_instance_profile (expand)"
		"[root] module.my-cluster.aws_launch_configuration.workers (expand)" -> "[root] module.my-cluster.local.default_ami_id_linux (expand)"
		"[root] module.my-cluster.aws_launch_configuration.workers (expand)" -> "[root] module.my-cluster.local.default_ami_id_windows (expand)"
		"[root] module.my-cluster.aws_launch_configuration.workers (expand)" -> "[root] module.my-cluster.local.ebs_optimized_not_supported (expand)"
		"[root] module.my-cluster.aws_launch_configuration.workers (expand)" -> "[root] module.my-cluster.local.launch_configuration_userdata_rendered (expand)"
		"[root] module.my-cluster.aws_launch_configuration.workers (expand)" -> "[root] module.my-cluster.var.worker_additional_security_group_ids (expand)"
		"[root] module.my-cluster.aws_launch_template.workers_launch_template (expand)" -> "[root] module.my-cluster.aws_iam_instance_profile.workers_launch_template (expand)"
		"[root] module.my-cluster.aws_launch_template.workers_launch_template (expand)" -> "[root] module.my-cluster.aws_iam_role_policy_attachment.workers_AmazonEC2ContainerRegistryReadOnly (expand)"
		"[root] module.my-cluster.aws_launch_template.workers_launch_template (expand)" -> "[root] module.my-cluster.aws_iam_role_policy_attachment.workers_AmazonEKSWorkerNodePolicy (expand)"
		"[root] module.my-cluster.aws_launch_template.workers_launch_template (expand)" -> "[root] module.my-cluster.aws_iam_role_policy_attachment.workers_AmazonEKS_CNI_Policy (expand)"
		"[root] module.my-cluster.aws_launch_template.workers_launch_template (expand)" -> "[root] module.my-cluster.aws_iam_role_policy_attachment.workers_additional_policies (expand)"
		"[root] module.my-cluster.aws_launch_template.workers_launch_template (expand)" -> "[root] module.my-cluster.aws_security_group_rule.cluster_primary_ingress_workers (expand)"
		"[root] module.my-cluster.aws_launch_template.workers_launch_template (expand)" -> "[root] module.my-cluster.aws_security_group_rule.workers_egress_internet (expand)"
		"[root] module.my-cluster.aws_launch_template.workers_launch_template (expand)" -> "[root] module.my-cluster.aws_security_group_rule.workers_ingress_cluster (expand)"
		"[root] module.my-cluster.aws_launch_template.workers_launch_template (expand)" -> "[root] module.my-cluster.aws_security_group_rule.workers_ingress_cluster_https (expand)"
		"[root] module.my-cluster.aws_launch_template.workers_launch_template (expand)" -> "[root] module.my-cluster.aws_security_group_rule.workers_ingress_cluster_kubelet (expand)"
		"[root] module.my-cluster.aws_launch_template.workers_launch_template (expand)" -> "[root] module.my-cluster.aws_security_group_rule.workers_ingress_cluster_primary (expand)"
		"[root] module.my-cluster.aws_launch_template.workers_launch_template (expand)" -> "[root] module.my-cluster.aws_security_group_rule.workers_ingress_self (expand)"
		"[root] module.my-cluster.aws_launch_template.workers_launch_template (expand)" -> "[root] module.my-cluster.data.aws_iam_instance_profile.custom_worker_group_launch_template_iam_instance_profile (expand)"
		"[root] module.my-cluster.aws_launch_template.workers_launch_template (expand)" -> "[root] module.my-cluster.local.default_ami_id_linux (expand)"
		"[root] module.my-cluster.aws_launch_template.workers_launch_template (expand)" -> "[root] module.my-cluster.local.default_ami_id_windows (expand)"
		"[root] module.my-cluster.aws_launch_template.workers_launch_template (expand)" -> "[root] module.my-cluster.local.ebs_optimized_not_supported (expand)"
		"[root] module.my-cluster.aws_launch_template.workers_launch_template (expand)" -> "[root] module.my-cluster.local.launch_template_userdata_rendered (expand)"
		"[root] module.my-cluster.aws_launch_template.workers_launch_template (expand)" -> "[root] module.my-cluster.var.worker_additional_security_group_ids (expand)"
		"[root] module.my-cluster.aws_security_group.cluster (expand)" -> "[root] module.my-cluster.var.cluster_create_security_group (expand)"
		"[root] module.my-cluster.aws_security_group.cluster (expand)" -> "[root] module.my-cluster.var.cluster_name (expand)"
		"[root] module.my-cluster.aws_security_group.cluster (expand)" -> "[root] module.my-cluster.var.create_eks (expand)"
		"[root] module.my-cluster.aws_security_group.cluster (expand)" -> "[root] module.my-cluster.var.tags (expand)"
		"[root] module.my-cluster.aws_security_group.cluster (expand)" -> "[root] module.my-cluster.var.vpc_id (expand)"
		"[root] module.my-cluster.aws_security_group.workers (expand)" -> "[root] module.my-cluster.var.cluster_name (expand)"
		"[root] module.my-cluster.aws_security_group.workers (expand)" -> "[root] module.my-cluster.var.create_eks (expand)"
		"[root] module.my-cluster.aws_security_group.workers (expand)" -> "[root] module.my-cluster.var.tags (expand)"
		"[root] module.my-cluster.aws_security_group.workers (expand)" -> "[root] module.my-cluster.var.vpc_id (expand)"
		"[root] module.my-cluster.aws_security_group.workers (expand)" -> "[root] module.my-cluster.var.worker_create_security_group (expand)"
		"[root] module.my-cluster.aws_security_group_rule.cluster_egress_internet (expand)" -> "[root] module.my-cluster.local.cluster_security_group_id (expand)"
		"[root] module.my-cluster.aws_security_group_rule.cluster_egress_internet (expand)" -> "[root] module.my-cluster.var.cluster_egress_cidrs (expand)"
		"[root] module.my-cluster.aws_security_group_rule.cluster_https_worker_ingress (expand)" -> "[root] module.my-cluster.local.cluster_security_group_id (expand)"
		"[root] module.my-cluster.aws_security_group_rule.cluster_https_worker_ingress (expand)" -> "[root] module.my-cluster.local.worker_security_group_id (expand)"
		"[root] module.my-cluster.aws_security_group_rule.cluster_primary_ingress_workers (expand)" -> "[root] module.my-cluster.local.cluster_primary_security_group_id (expand)"
		"[root] module.my-cluster.aws_security_group_rule.cluster_primary_ingress_workers (expand)" -> "[root] module.my-cluster.var.worker_create_cluster_primary_security_group_rules (expand)"
		"[root] module.my-cluster.aws_security_group_rule.cluster_private_access_cidrs_source (expand)" -> "[root] module.my-cluster.aws_eks_cluster.this (expand)"
		"[root] module.my-cluster.aws_security_group_rule.cluster_private_access_cidrs_source (expand)" -> "[root] module.my-cluster.var.cluster_create_endpoint_private_access_sg_rule (expand)"
		"[root] module.my-cluster.aws_security_group_rule.cluster_private_access_cidrs_source (expand)" -> "[root] module.my-cluster.var.cluster_endpoint_private_access_cidrs (expand)"
		"[root] module.my-cluster.aws_security_group_rule.cluster_private_access_sg_source (expand)" -> "[root] module.my-cluster.aws_eks_cluster.this (expand)"
		"[root] module.my-cluster.aws_security_group_rule.cluster_private_access_sg_source (expand)" -> "[root] module.my-cluster.var.cluster_create_endpoint_private_access_sg_rule (expand)"
		"[root] module.my-cluster.aws_security_group_rule.cluster_private_access_sg_source (expand)" -> "[root] module.my-cluster.var.cluster_endpoint_private_access_sg (expand)"
		"[root] module.my-cluster.aws_security_group_rule.workers_egress_internet (expand)" -> "[root] module.my-cluster.local.worker_security_group_id (expand)"
		"[root] module.my-cluster.aws_security_group_rule.workers_egress_internet (expand)" -> "[root] module.my-cluster.var.workers_egress_cidrs (expand)"
		"[root] module.my-cluster.aws_security_group_rule.workers_ingress_cluster (expand)" -> "[root] module.my-cluster.local.cluster_security_group_id (expand)"
		"[root] module.my-cluster.aws_security_group_rule.workers_ingress_cluster (expand)" -> "[root] module.my-cluster.local.worker_security_group_id (expand)"
		"[root] module.my-cluster.aws_security_group_rule.workers_ingress_cluster (expand)" -> "[root] module.my-cluster.var.worker_sg_ingress_from_port (expand)"
		"[root] module.my-cluster.aws_security_group_rule.workers_ingress_cluster_https (expand)" -> "[root] module.my-cluster.local.cluster_security_group_id (expand)"
		"[root] module.my-cluster.aws_security_group_rule.workers_ingress_cluster_https (expand)" -> "[root] module.my-cluster.local.worker_security_group_id (expand)"
		"[root] module.my-cluster.aws_security_group_rule.workers_ingress_cluster_kubelet (expand)" -> "[root] module.my-cluster.local.cluster_security_group_id (expand)"
		"[root] module.my-cluster.aws_security_group_rule.workers_ingress_cluster_kubelet (expand)" -> "[root] module.my-cluster.local.worker_security_group_id (expand)"
		"[root] module.my-cluster.aws_security_group_rule.workers_ingress_cluster_kubelet (expand)" -> "[root] module.my-cluster.var.worker_sg_ingress_from_port (expand)"
		"[root] module.my-cluster.aws_security_group_rule.workers_ingress_cluster_primary (expand)" -> "[root] module.my-cluster.local.cluster_primary_security_group_id (expand)"
		"[root] module.my-cluster.aws_security_group_rule.workers_ingress_cluster_primary (expand)" -> "[root] module.my-cluster.var.worker_create_cluster_primary_security_group_rules (expand)"
		"[root] module.my-cluster.aws_security_group_rule.workers_ingress_self (expand)" -> "[root] module.my-cluster.local.worker_security_group_id (expand)"
		"[root] module.my-cluster.data.aws_ami.eks_worker (expand)" -> "[root] module.my-cluster.local.worker_ami_name_filter (expand)"
		"[root] module.my-cluster.data.aws_ami.eks_worker (expand)" -> "[root] module.my-cluster.local.worker_groups_platforms (expand)"
		"[root] module.my-cluster.data.aws_ami.eks_worker (expand)" -> "[root] module.my-cluster.var.worker_ami_owner_id (expand)"
		"[root] module.my-cluster.data.aws_ami.eks_worker (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/aws\"]"
		"[root] module.my-cluster.data.aws_ami.eks_worker_windows (expand)" -> "[root] module.my-cluster.local.worker_ami_name_filter_windows (expand)"
		"[root] module.my-cluster.data.aws_ami.eks_worker_windows (expand)" -> "[root] module.my-cluster.local.worker_groups_platforms (expand)"
		"[root] module.my-cluster.data.aws_ami.eks_worker_windows (expand)" -> "[root] module.my-cluster.var.worker_ami_owner_id_windows (expand)"
		"[root] module.my-cluster.data.aws_ami.eks_worker_windows (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/aws\"]"
		"[root] module.my-cluster.data.aws_caller_identity.current (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.data.aws_caller_identity.current (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/aws\"]"
		"[root] module.my-cluster.data.aws_iam_instance_profile.custom_worker_group_iam_instance_profile (expand)" -> "[root] module.my-cluster.local.worker_group_launch_configuration_count (expand)"
		"[root] module.my-cluster.data.aws_iam_instance_profile.custom_worker_group_iam_instance_profile (expand)" -> "[root] module.my-cluster.local.workers_group_defaults (expand)"
		"[root] module.my-cluster.data.aws_iam_instance_profile.custom_worker_group_iam_instance_profile (expand)" -> "[root] module.my-cluster.var.manage_worker_iam_resources (expand)"
		"[root] module.my-cluster.data.aws_iam_instance_profile.custom_worker_group_launch_template_iam_instance_profile (expand)" -> "[root] module.my-cluster.local.worker_group_launch_template_count (expand)"
		"[root] module.my-cluster.data.aws_iam_instance_profile.custom_worker_group_launch_template_iam_instance_profile (expand)" -> "[root] module.my-cluster.local.workers_group_defaults (expand)"
		"[root] module.my-cluster.data.aws_iam_instance_profile.custom_worker_group_launch_template_iam_instance_profile (expand)" -> "[root] module.my-cluster.var.manage_worker_iam_resources (expand)"
		"[root] module.my-cluster.data.aws_iam_policy_document.cluster_assume_role_policy (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.data.aws_iam_policy_document.cluster_assume_role_policy (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/aws\"]"
		"[root] module.my-cluster.data.aws_iam_policy_document.cluster_elb_sl_role_creation (expand)" -> "[root] module.my-cluster.var.create_eks (expand)"
		"[root] module.my-cluster.data.aws_iam_policy_document.cluster_elb_sl_role_creation (expand)" -> "[root] module.my-cluster.var.manage_cluster_iam_resources (expand)"
		"[root] module.my-cluster.data.aws_iam_policy_document.cluster_elb_sl_role_creation (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/aws\"]"
		"[root] module.my-cluster.data.aws_iam_policy_document.workers_assume_role_policy (expand)" -> "[root] module.my-cluster.local.ec2_principal (expand)"
		"[root] module.my-cluster.data.aws_iam_role.custom_cluster_iam_role (expand)" -> "[root] module.my-cluster.var.cluster_iam_role_name (expand)"
		"[root] module.my-cluster.data.aws_iam_role.custom_cluster_iam_role (expand)" -> "[root] module.my-cluster.var.manage_cluster_iam_resources (expand)"
		"[root] module.my-cluster.data.aws_iam_role.custom_cluster_iam_role (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/aws\"]"
		"[root] module.my-cluster.data.aws_partition.current (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.data.aws_partition.current (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/aws\"]"
		"[root] module.my-cluster.data.http.wait_for_cluster (expand)" -> "[root] module.my-cluster.aws_security_group_rule.cluster_private_access_cidrs_source (expand)"
		"[root] module.my-cluster.data.http.wait_for_cluster (expand)" -> "[root] module.my-cluster.aws_security_group_rule.cluster_private_access_sg_source (expand)"
		"[root] module.my-cluster.data.http.wait_for_cluster (expand)" -> "[root] module.my-cluster.local.cluster_auth_base64 (expand)"
		"[root] module.my-cluster.data.http.wait_for_cluster (expand)" -> "[root] module.my-cluster.var.manage_aws_auth (expand)"
		"[root] module.my-cluster.data.http.wait_for_cluster (expand)" -> "[root] module.my-cluster.var.wait_for_cluster_timeout (expand)"
		"[root] module.my-cluster.data.http.wait_for_cluster (expand)" -> "[root] provider[\"registry.terraform.io/terraform-aws-modules/http\"]"
		"[root] module.my-cluster.kubernetes_config_map.aws_auth (expand)" -> "[root] module.my-cluster.local.configmap_roles (expand)"
		"[root] module.my-cluster.kubernetes_config_map.aws_auth (expand)" -> "[root] module.my-cluster.var.aws_auth_additional_labels (expand)"
		"[root] module.my-cluster.kubernetes_config_map.aws_auth (expand)" -> "[root] module.my-cluster.var.map_accounts (expand)"
		"[root] module.my-cluster.kubernetes_config_map.aws_auth (expand)" -> "[root] module.my-cluster.var.map_roles (expand)"
		"[root] module.my-cluster.kubernetes_config_map.aws_auth (expand)" -> "[root] module.my-cluster.var.map_users (expand)"
		"[root] module.my-cluster.kubernetes_config_map.aws_auth (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/kubernetes\"]"
		"[root] module.my-cluster.local.auth_launch_template_worker_roles (expand)" -> "[root] module.my-cluster.aws_iam_instance_profile.workers_launch_template (expand)"
		"[root] module.my-cluster.local.auth_launch_template_worker_roles (expand)" -> "[root] module.my-cluster.data.aws_caller_identity.current (expand)"
		"[root] module.my-cluster.local.auth_launch_template_worker_roles (expand)" -> "[root] module.my-cluster.data.aws_iam_instance_profile.custom_worker_group_launch_template_iam_instance_profile (expand)"
		"[root] module.my-cluster.local.auth_worker_roles (expand)" -> "[root] module.my-cluster.aws_iam_instance_profile.workers (expand)"
		"[root] module.my-cluster.local.auth_worker_roles (expand)" -> "[root] module.my-cluster.data.aws_caller_identity.current (expand)"
		"[root] module.my-cluster.local.auth_worker_roles (expand)" -> "[root] module.my-cluster.data.aws_iam_instance_profile.custom_worker_group_iam_instance_profile (expand)"
		"[root] module.my-cluster.local.client_id_list (expand)" -> "[root] module.my-cluster.local.sts_principal (expand)"
		"[root] module.my-cluster.local.client_id_list (expand)" -> "[root] module.my-cluster.var.openid_connect_audiences (expand)"
		"[root] module.my-cluster.local.cluster_arn (expand)" -> "[root] module.my-cluster.aws_eks_cluster.this (expand)"
		"[root] module.my-cluster.local.cluster_auth_base64 (expand)" -> "[root] module.my-cluster.aws_eks_cluster.this (expand)"
		"[root] module.my-cluster.local.cluster_endpoint (expand)" -> "[root] module.my-cluster.aws_eks_cluster.this (expand)"
		"[root] module.my-cluster.local.cluster_iam_role_arn (expand)" -> "[root] module.my-cluster.aws_iam_role.cluster (expand)"
		"[root] module.my-cluster.local.cluster_iam_role_arn (expand)" -> "[root] module.my-cluster.data.aws_iam_role.custom_cluster_iam_role (expand)"
		"[root] module.my-cluster.local.cluster_iam_role_name (expand)" -> "[root] module.my-cluster.aws_iam_role.cluster (expand)"
		"[root] module.my-cluster.local.cluster_id (expand)" -> "[root] module.my-cluster.aws_eks_cluster.this (expand)"
		"[root] module.my-cluster.local.cluster_name (expand)" -> "[root] module.my-cluster.aws_eks_cluster.this (expand)"
		"[root] module.my-cluster.local.cluster_oidc_issuer_url (expand)" -> "[root] module.my-cluster.aws_eks_cluster.this (expand)"
		"[root] module.my-cluster.local.cluster_primary_security_group_id (expand)" -> "[root] module.my-cluster.aws_eks_cluster.this (expand)"
		"[root] module.my-cluster.local.cluster_security_group_id (expand)" -> "[root] module.my-cluster.aws_security_group.cluster (expand)"
		"[root] module.my-cluster.local.cluster_security_group_id (expand)" -> "[root] module.my-cluster.var.cluster_security_group_id (expand)"
		"[root] module.my-cluster.local.configmap_roles (expand)" -> "[root] module.my-cluster.local.auth_launch_template_worker_roles (expand)"
		"[root] module.my-cluster.local.configmap_roles (expand)" -> "[root] module.my-cluster.local.auth_worker_roles (expand)"
		"[root] module.my-cluster.local.configmap_roles (expand)" -> "[root] module.my-cluster.module.fargate.output.aws_auth_roles (expand)"
		"[root] module.my-cluster.local.configmap_roles (expand)" -> "[root] module.my-cluster.module.node_groups.output.aws_auth_roles (expand)"
		"[root] module.my-cluster.local.default_ami_id_linux (expand)" -> "[root] module.my-cluster.local.workers_group_defaults (expand)"
		"[root] module.my-cluster.local.default_ami_id_windows (expand)" -> "[root] module.my-cluster.local.workers_group_defaults (expand)"
		"[root] module.my-cluster.local.default_iam_role_id (expand)" -> "[root] module.my-cluster.aws_iam_role.workers (expand)"
		"[root] module.my-cluster.local.ebs_optimized_not_supported (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.local.ec2_principal (expand)" -> "[root] module.my-cluster.data.aws_partition.current (expand)"
		"[root] module.my-cluster.local.kubeconfig (expand)" -> "[root] module.my-cluster.local.cluster_auth_base64 (expand)"
		"[root] module.my-cluster.local.kubeconfig (expand)" -> "[root] module.my-cluster.local.cluster_endpoint (expand)"
		"[root] module.my-cluster.local.kubeconfig (expand)" -> "[root] module.my-cluster.local.cluster_name (expand)"
		"[root] module.my-cluster.local.kubeconfig (expand)" -> "[root] module.my-cluster.var.kubeconfig_aws_authenticator_additional_args (expand)"
		"[root] module.my-cluster.local.kubeconfig (expand)" -> "[root] module.my-cluster.var.kubeconfig_aws_authenticator_command (expand)"
		"[root] module.my-cluster.local.kubeconfig (expand)" -> "[root] module.my-cluster.var.kubeconfig_aws_authenticator_command_args (expand)"
		"[root] module.my-cluster.local.kubeconfig (expand)" -> "[root] module.my-cluster.var.kubeconfig_aws_authenticator_env_variables (expand)"
		"[root] module.my-cluster.local.kubeconfig (expand)" -> "[root] module.my-cluster.var.kubeconfig_name (expand)"
		"[root] module.my-cluster.local.launch_configuration_userdata_rendered (expand)" -> "[root] module.my-cluster.local.cluster_auth_base64 (expand)"
		"[root] module.my-cluster.local.launch_configuration_userdata_rendered (expand)" -> "[root] module.my-cluster.local.cluster_endpoint (expand)"
		"[root] module.my-cluster.local.launch_configuration_userdata_rendered (expand)" -> "[root] module.my-cluster.local.cluster_name (expand)"
		"[root] module.my-cluster.local.launch_configuration_userdata_rendered (expand)" -> "[root] module.my-cluster.local.worker_group_launch_configuration_count (expand)"
		"[root] module.my-cluster.local.launch_configuration_userdata_rendered (expand)" -> "[root] module.my-cluster.local.workers_group_defaults (expand)"
		"[root] module.my-cluster.local.launch_template_userdata_rendered (expand)" -> "[root] module.my-cluster.local.cluster_auth_base64 (expand)"
		"[root] module.my-cluster.local.launch_template_userdata_rendered (expand)" -> "[root] module.my-cluster.local.cluster_endpoint (expand)"
		"[root] module.my-cluster.local.launch_template_userdata_rendered (expand)" -> "[root] module.my-cluster.local.cluster_name (expand)"
		"[root] module.my-cluster.local.launch_template_userdata_rendered (expand)" -> "[root] module.my-cluster.local.worker_group_launch_template_count (expand)"
		"[root] module.my-cluster.local.launch_template_userdata_rendered (expand)" -> "[root] module.my-cluster.local.workers_group_defaults (expand)"
		"[root] module.my-cluster.local.policy_arn_prefix (expand)" -> "[root] module.my-cluster.data.aws_partition.current (expand)"
		"[root] module.my-cluster.local.sts_principal (expand)" -> "[root] module.my-cluster.data.aws_partition.current (expand)"
		"[root] module.my-cluster.local.worker_ami_name_filter (expand)" -> "[root] module.my-cluster.var.cluster_version (expand)"
		"[root] module.my-cluster.local.worker_ami_name_filter (expand)" -> "[root] module.my-cluster.var.worker_ami_name_filter (expand)"
		"[root] module.my-cluster.local.worker_ami_name_filter_windows (expand)" -> "[root] module.my-cluster.var.cluster_version (expand)"
		"[root] module.my-cluster.local.worker_ami_name_filter_windows (expand)" -> "[root] module.my-cluster.var.worker_ami_name_filter_windows (expand)"
		"[root] module.my-cluster.local.worker_group_launch_configuration_count (expand)" -> "[root] module.my-cluster.var.worker_groups (expand)"
		"[root] module.my-cluster.local.worker_group_launch_template_count (expand)" -> "[root] module.my-cluster.var.worker_groups_launch_template (expand)"
		"[root] module.my-cluster.local.worker_groups_platforms (expand)" -> "[root] module.my-cluster.var.default_platform (expand)"
		"[root] module.my-cluster.local.worker_groups_platforms (expand)" -> "[root] module.my-cluster.var.worker_groups (expand)"
		"[root] module.my-cluster.local.worker_groups_platforms (expand)" -> "[root] module.my-cluster.var.worker_groups_launch_template (expand)"
		"[root] module.my-cluster.local.worker_groups_platforms (expand)" -> "[root] module.my-cluster.var.workers_group_defaults (expand)"
		"[root] module.my-cluster.local.worker_security_group_id (expand)" -> "[root] module.my-cluster.aws_security_group.workers (expand)"
		"[root] module.my-cluster.local.worker_security_group_id (expand)" -> "[root] module.my-cluster.var.worker_security_group_id (expand)"
		"[root] module.my-cluster.local.workers_group_defaults (expand)" -> "[root] module.my-cluster.local.workers_group_defaults_defaults (expand)"
		"[root] module.my-cluster.local.workers_group_defaults_defaults (expand)" -> "[root] module.my-cluster.data.aws_ami.eks_worker (expand)"
		"[root] module.my-cluster.local.workers_group_defaults_defaults (expand)" -> "[root] module.my-cluster.data.aws_ami.eks_worker_windows (expand)"
		"[root] module.my-cluster.local.workers_group_defaults_defaults (expand)" -> "[root] module.my-cluster.var.subnets (expand)"
		"[root] module.my-cluster.local_file.kubeconfig (expand)" -> "[root] module.my-cluster.local.kubeconfig (expand)"
		"[root] module.my-cluster.local_file.kubeconfig (expand)" -> "[root] module.my-cluster.var.kubeconfig_file_permission (expand)"
		"[root] module.my-cluster.local_file.kubeconfig (expand)" -> "[root] module.my-cluster.var.kubeconfig_output_path (expand)"
		"[root] module.my-cluster.local_file.kubeconfig (expand)" -> "[root] module.my-cluster.var.write_kubeconfig (expand)"
		"[root] module.my-cluster.local_file.kubeconfig (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/local\"]"
		"[root] module.my-cluster.module.fargate (close)" -> "[root] module.my-cluster.module.fargate.aws_iam_role_policy_attachment.eks_fargate_pod (expand)"
		"[root] module.my-cluster.module.fargate (close)" -> "[root] module.my-cluster.module.fargate.output.aws_auth_roles (expand)"
		"[root] module.my-cluster.module.fargate (close)" -> "[root] module.my-cluster.module.fargate.output.fargate_profile_arns (expand)"
		"[root] module.my-cluster.module.fargate (close)" -> "[root] module.my-cluster.module.fargate.output.fargate_profile_ids (expand)"
		"[root] module.my-cluster.module.fargate (close)" -> "[root] module.my-cluster.module.fargate.output.iam_role_arn (expand)"
		"[root] module.my-cluster.module.fargate (close)" -> "[root] module.my-cluster.module.fargate.output.iam_role_name (expand)"
		"[root] module.my-cluster.module.fargate (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.module.fargate.aws_eks_fargate_profile.this (expand)" -> "[root] module.my-cluster.module.fargate.local.fargate_profiles (expand)"
		"[root] module.my-cluster.module.fargate.aws_eks_fargate_profile.this (expand)" -> "[root] module.my-cluster.module.fargate.local.pod_execution_role_arn (expand)"
		"[root] module.my-cluster.module.fargate.aws_eks_fargate_profile.this (expand)" -> "[root] module.my-cluster.module.fargate.var.subnets (expand)"
		"[root] module.my-cluster.module.fargate.aws_iam_role.eks_fargate_pod (expand)" -> "[root] module.my-cluster.module.fargate.data.aws_iam_policy_document.eks_fargate_pod_assume_role (expand)"
		"[root] module.my-cluster.module.fargate.aws_iam_role.eks_fargate_pod (expand)" -> "[root] module.my-cluster.module.fargate.var.cluster_name (expand)"
		"[root] module.my-cluster.module.fargate.aws_iam_role.eks_fargate_pod (expand)" -> "[root] module.my-cluster.module.fargate.var.iam_path (expand)"
		"[root] module.my-cluster.module.fargate.aws_iam_role.eks_fargate_pod (expand)" -> "[root] module.my-cluster.module.fargate.var.permissions_boundary (expand)"
		"[root] module.my-cluster.module.fargate.aws_iam_role.eks_fargate_pod (expand)" -> "[root] module.my-cluster.module.fargate.var.tags (expand)"
		"[root] module.my-cluster.module.fargate.aws_iam_role_policy_attachment.eks_fargate_pod (expand)" -> "[root] module.my-cluster.module.fargate.aws_iam_role.eks_fargate_pod (expand)"
		"[root] module.my-cluster.module.fargate.aws_iam_role_policy_attachment.eks_fargate_pod (expand)" -> "[root] module.my-cluster.module.fargate.data.aws_partition.current (expand)"
		"[root] module.my-cluster.module.fargate.data.aws_iam_policy_document.eks_fargate_pod_assume_role (expand)" -> "[root] module.my-cluster.module.fargate.local.create_eks (expand)"
		"[root] module.my-cluster.module.fargate.data.aws_iam_policy_document.eks_fargate_pod_assume_role (expand)" -> "[root] module.my-cluster.module.fargate.var.create_fargate_pod_execution_role (expand)"
		"[root] module.my-cluster.module.fargate.data.aws_iam_policy_document.eks_fargate_pod_assume_role (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/aws\"]"
		"[root] module.my-cluster.module.fargate.data.aws_iam_role.custom_fargate_iam_role (expand)" -> "[root] module.my-cluster.module.fargate.local.create_eks (expand)"
		"[root] module.my-cluster.module.fargate.data.aws_iam_role.custom_fargate_iam_role (expand)" -> "[root] module.my-cluster.module.fargate.var.create_fargate_pod_execution_role (expand)"
		"[root] module.my-cluster.module.fargate.data.aws_iam_role.custom_fargate_iam_role (expand)" -> "[root] module.my-cluster.module.fargate.var.fargate_pod_execution_role_name (expand)"
		"[root] module.my-cluster.module.fargate.data.aws_iam_role.custom_fargate_iam_role (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/aws\"]"
		"[root] module.my-cluster.module.fargate.data.aws_partition.current (expand)" -> "[root] module.my-cluster.module.fargate (expand)"
		"[root] module.my-cluster.module.fargate.data.aws_partition.current (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/aws\"]"
		"[root] module.my-cluster.module.fargate.local.create_eks (expand)" -> "[root] module.my-cluster.module.fargate.var.create_eks (expand)"
		"[root] module.my-cluster.module.fargate.local.create_eks (expand)" -> "[root] module.my-cluster.module.fargate.var.fargate_profiles (expand)"
		"[root] module.my-cluster.module.fargate.local.fargate_profiles (expand)" -> "[root] module.my-cluster.module.fargate.var.create_eks (expand)"
		"[root] module.my-cluster.module.fargate.local.fargate_profiles (expand)" -> "[root] module.my-cluster.module.fargate.var.fargate_profiles (expand)"
		"[root] module.my-cluster.module.fargate.local.pod_execution_role_arn (expand)" -> "[root] module.my-cluster.module.fargate.aws_iam_role.eks_fargate_pod (expand)"
		"[root] module.my-cluster.module.fargate.local.pod_execution_role_arn (expand)" -> "[root] module.my-cluster.module.fargate.data.aws_iam_role.custom_fargate_iam_role (expand)"
		"[root] module.my-cluster.module.fargate.local.pod_execution_role_name (expand)" -> "[root] module.my-cluster.module.fargate.aws_iam_role.eks_fargate_pod (expand)"
		"[root] module.my-cluster.module.fargate.local.pod_execution_role_name (expand)" -> "[root] module.my-cluster.module.fargate.data.aws_iam_role.custom_fargate_iam_role (expand)"
		"[root] module.my-cluster.module.fargate.output.aws_auth_roles (expand)" -> "[root] module.my-cluster.module.fargate.local.pod_execution_role_arn (expand)"
		"[root] module.my-cluster.module.fargate.output.fargate_profile_arns (expand)" -> "[root] module.my-cluster.module.fargate.aws_eks_fargate_profile.this (expand)"
		"[root] module.my-cluster.module.fargate.output.fargate_profile_ids (expand)" -> "[root] module.my-cluster.module.fargate.aws_eks_fargate_profile.this (expand)"
		"[root] module.my-cluster.module.fargate.output.iam_role_arn (expand)" -> "[root] module.my-cluster.module.fargate.local.pod_execution_role_arn (expand)"
		"[root] module.my-cluster.module.fargate.output.iam_role_name (expand)" -> "[root] module.my-cluster.module.fargate.local.pod_execution_role_name (expand)"
		"[root] module.my-cluster.module.fargate.var.cluster_name (expand)" -> "[root] module.my-cluster.local.cluster_name (expand)"
		"[root] module.my-cluster.module.fargate.var.cluster_name (expand)" -> "[root] module.my-cluster.module.fargate (expand)"
		"[root] module.my-cluster.module.fargate.var.create_eks (expand)" -> "[root] module.my-cluster.module.fargate (expand)"
		"[root] module.my-cluster.module.fargate.var.create_eks (expand)" -> "[root] module.my-cluster.var.create_eks (expand)"
		"[root] module.my-cluster.module.fargate.var.create_fargate_pod_execution_role (expand)" -> "[root] module.my-cluster.module.fargate (expand)"
		"[root] module.my-cluster.module.fargate.var.create_fargate_pod_execution_role (expand)" -> "[root] module.my-cluster.var.create_fargate_pod_execution_role (expand)"
		"[root] module.my-cluster.module.fargate.var.fargate_pod_execution_role_name (expand)" -> "[root] module.my-cluster.module.fargate (expand)"
		"[root] module.my-cluster.module.fargate.var.fargate_pod_execution_role_name (expand)" -> "[root] module.my-cluster.var.fargate_pod_execution_role_name (expand)"
		"[root] module.my-cluster.module.fargate.var.fargate_profiles (expand)" -> "[root] module.my-cluster.module.fargate (expand)"
		"[root] module.my-cluster.module.fargate.var.fargate_profiles (expand)" -> "[root] module.my-cluster.var.fargate_profiles (expand)"
		"[root] module.my-cluster.module.fargate.var.iam_path (expand)" -> "[root] module.my-cluster.module.fargate (expand)"
		"[root] module.my-cluster.module.fargate.var.iam_path (expand)" -> "[root] module.my-cluster.var.iam_path (expand)"
		"[root] module.my-cluster.module.fargate.var.permissions_boundary (expand)" -> "[root] module.my-cluster.module.fargate (expand)"
		"[root] module.my-cluster.module.fargate.var.permissions_boundary (expand)" -> "[root] module.my-cluster.var.permissions_boundary (expand)"
		"[root] module.my-cluster.module.fargate.var.subnets (expand)" -> "[root] module.my-cluster.module.fargate (expand)"
		"[root] module.my-cluster.module.fargate.var.subnets (expand)" -> "[root] module.my-cluster.var.fargate_subnets (expand)"
		"[root] module.my-cluster.module.fargate.var.subnets (expand)" -> "[root] module.my-cluster.var.subnets (expand)"
		"[root] module.my-cluster.module.fargate.var.tags (expand)" -> "[root] module.my-cluster.module.fargate (expand)"
		"[root] module.my-cluster.module.fargate.var.tags (expand)" -> "[root] module.my-cluster.var.tags (expand)"
		"[root] module.my-cluster.module.node_groups (close)" -> "[root] module.my-cluster.module.node_groups.output.node_groups (expand)"
		"[root] module.my-cluster.module.node_groups (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.module.node_groups.aws_eks_node_group.workers (expand)" -> "[root] module.my-cluster.module.node_groups.aws_launch_template.workers (expand)"
		"[root] module.my-cluster.module.node_groups.aws_eks_node_group.workers (expand)" -> "[root] module.my-cluster.module.node_groups.var.ng_depends_on (expand)"
		"[root] module.my-cluster.module.node_groups.aws_launch_template.workers (expand)" -> "[root] module.my-cluster.module.node_groups.data.cloudinit_config.workers_userdata (expand)"
		"[root] module.my-cluster.module.node_groups.aws_launch_template.workers (expand)" -> "[root] module.my-cluster.module.node_groups.local.node_groups_names (expand)"
		"[root] module.my-cluster.module.node_groups.aws_launch_template.workers (expand)" -> "[root] module.my-cluster.module.node_groups.var.ebs_optimized_not_supported (expand)"
		"[root] module.my-cluster.module.node_groups.aws_launch_template.workers (expand)" -> "[root] module.my-cluster.module.node_groups.var.tags (expand)"
		"[root] module.my-cluster.module.node_groups.aws_launch_template.workers (expand)" -> "[root] module.my-cluster.module.node_groups.var.worker_additional_security_group_ids (expand)"
		"[root] module.my-cluster.module.node_groups.aws_launch_template.workers (expand)" -> "[root] module.my-cluster.module.node_groups.var.worker_security_group_id (expand)"
		"[root] module.my-cluster.module.node_groups.data.cloudinit_config.workers_userdata (expand)" -> "[root] module.my-cluster.module.node_groups.local.node_groups_expanded (expand)"
		"[root] module.my-cluster.module.node_groups.data.cloudinit_config.workers_userdata (expand)" -> "[root] module.my-cluster.module.node_groups.var.cluster_auth_base64 (expand)"
		"[root] module.my-cluster.module.node_groups.data.cloudinit_config.workers_userdata (expand)" -> "[root] module.my-cluster.module.node_groups.var.cluster_endpoint (expand)"
		"[root] module.my-cluster.module.node_groups.data.cloudinit_config.workers_userdata (expand)" -> "[root] module.my-cluster.module.node_groups.var.cluster_name (expand)"
		"[root] module.my-cluster.module.node_groups.data.cloudinit_config.workers_userdata (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/cloudinit\"]"
		"[root] module.my-cluster.module.node_groups.local.node_groups_expanded (expand)" -> "[root] module.my-cluster.module.node_groups.var.create_eks (expand)"
		"[root] module.my-cluster.module.node_groups.local.node_groups_expanded (expand)" -> "[root] module.my-cluster.module.node_groups.var.default_iam_role_arn (expand)"
		"[root] module.my-cluster.module.node_groups.local.node_groups_expanded (expand)" -> "[root] module.my-cluster.module.node_groups.var.node_groups (expand)"
		"[root] module.my-cluster.module.node_groups.local.node_groups_expanded (expand)" -> "[root] module.my-cluster.module.node_groups.var.node_groups_defaults (expand)"
		"[root] module.my-cluster.module.node_groups.local.node_groups_expanded (expand)" -> "[root] module.my-cluster.module.node_groups.var.workers_group_defaults (expand)"
		"[root] module.my-cluster.module.node_groups.local.node_groups_names (expand)" -> "[root] module.my-cluster.module.node_groups.local.node_groups_expanded (expand)"
		"[root] module.my-cluster.module.node_groups.local.node_groups_names (expand)" -> "[root] module.my-cluster.module.node_groups.var.cluster_name (expand)"
		"[root] module.my-cluster.module.node_groups.output.aws_auth_roles (expand)" -> "[root] module.my-cluster.module.node_groups.local.node_groups_expanded (expand)"
		"[root] module.my-cluster.module.node_groups.output.node_groups (expand)" -> "[root] module.my-cluster.module.node_groups.aws_eks_node_group.workers (expand)"
		"[root] module.my-cluster.module.node_groups.var.cluster_auth_base64 (expand)" -> "[root] module.my-cluster.local.cluster_auth_base64 (expand)"
		"[root] module.my-cluster.module.node_groups.var.cluster_auth_base64 (expand)" -> "[root] module.my-cluster.module.node_groups (expand)"
		"[root] module.my-cluster.module.node_groups.var.cluster_endpoint (expand)" -> "[root] module.my-cluster.local.cluster_endpoint (expand)"
		"[root] module.my-cluster.module.node_groups.var.cluster_endpoint (expand)" -> "[root] module.my-cluster.module.node_groups (expand)"
		"[root] module.my-cluster.module.node_groups.var.cluster_name (expand)" -> "[root] module.my-cluster.local.cluster_name (expand)"
		"[root] module.my-cluster.module.node_groups.var.cluster_name (expand)" -> "[root] module.my-cluster.module.node_groups (expand)"
		"[root] module.my-cluster.module.node_groups.var.create_eks (expand)" -> "[root] module.my-cluster.module.node_groups (expand)"
		"[root] module.my-cluster.module.node_groups.var.create_eks (expand)" -> "[root] module.my-cluster.var.create_eks (expand)"
		"[root] module.my-cluster.module.node_groups.var.default_iam_role_arn (expand)" -> "[root] module.my-cluster.aws_iam_role.workers (expand)"
		"[root] module.my-cluster.module.node_groups.var.default_iam_role_arn (expand)" -> "[root] module.my-cluster.module.node_groups (expand)"
		"[root] module.my-cluster.module.node_groups.var.ebs_optimized_not_supported (expand)" -> "[root] module.my-cluster.local.ebs_optimized_not_supported (expand)"
		"[root] module.my-cluster.module.node_groups.var.ebs_optimized_not_supported (expand)" -> "[root] module.my-cluster.module.node_groups (expand)"
		"[root] module.my-cluster.module.node_groups.var.ng_depends_on (expand)" -> "[root] module.my-cluster.aws_iam_role_policy_attachment.workers_AmazonEC2ContainerRegistryReadOnly (expand)"
		"[root] module.my-cluster.module.node_groups.var.ng_depends_on (expand)" -> "[root] module.my-cluster.aws_iam_role_policy_attachment.workers_AmazonEKSWorkerNodePolicy (expand)"
		"[root] module.my-cluster.module.node_groups.var.ng_depends_on (expand)" -> "[root] module.my-cluster.aws_iam_role_policy_attachment.workers_AmazonEKS_CNI_Policy (expand)"
		"[root] module.my-cluster.module.node_groups.var.ng_depends_on (expand)" -> "[root] module.my-cluster.kubernetes_config_map.aws_auth (expand)"
		"[root] module.my-cluster.module.node_groups.var.node_groups (expand)" -> "[root] module.my-cluster.module.node_groups (expand)"
		"[root] module.my-cluster.module.node_groups.var.node_groups (expand)" -> "[root] module.my-cluster.var.node_groups (expand)"
		"[root] module.my-cluster.module.node_groups.var.node_groups_defaults (expand)" -> "[root] module.my-cluster.module.node_groups (expand)"
		"[root] module.my-cluster.module.node_groups.var.node_groups_defaults (expand)" -> "[root] module.my-cluster.var.node_groups_defaults (expand)"
		"[root] module.my-cluster.module.node_groups.var.tags (expand)" -> "[root] module.my-cluster.module.node_groups (expand)"
		"[root] module.my-cluster.module.node_groups.var.tags (expand)" -> "[root] module.my-cluster.var.tags (expand)"
		"[root] module.my-cluster.module.node_groups.var.worker_additional_security_group_ids (expand)" -> "[root] module.my-cluster.module.node_groups (expand)"
		"[root] module.my-cluster.module.node_groups.var.worker_additional_security_group_ids (expand)" -> "[root] module.my-cluster.var.worker_additional_security_group_ids (expand)"
		"[root] module.my-cluster.module.node_groups.var.worker_security_group_id (expand)" -> "[root] module.my-cluster.local.worker_security_group_id (expand)"
		"[root] module.my-cluster.module.node_groups.var.worker_security_group_id (expand)" -> "[root] module.my-cluster.module.node_groups (expand)"
		"[root] module.my-cluster.module.node_groups.var.workers_group_defaults (expand)" -> "[root] module.my-cluster.local.workers_group_defaults (expand)"
		"[root] module.my-cluster.module.node_groups.var.workers_group_defaults (expand)" -> "[root] module.my-cluster.module.node_groups (expand)"
		"[root] module.my-cluster.output.cloudwatch_log_group_arn (expand)" -> "[root] module.my-cluster.aws_cloudwatch_log_group.this (expand)"
		"[root] module.my-cluster.output.cloudwatch_log_group_name (expand)" -> "[root] module.my-cluster.aws_cloudwatch_log_group.this (expand)"
		"[root] module.my-cluster.output.cluster_arn (expand)" -> "[root] module.my-cluster.local.cluster_arn (expand)"
		"[root] module.my-cluster.output.cluster_certificate_authority_data (expand)" -> "[root] module.my-cluster.local.cluster_auth_base64 (expand)"
		"[root] module.my-cluster.output.cluster_endpoint (expand)" -> "[root] module.my-cluster.local.cluster_endpoint (expand)"
		"[root] module.my-cluster.output.cluster_iam_role_arn (expand)" -> "[root] module.my-cluster.local.cluster_iam_role_arn (expand)"
		"[root] module.my-cluster.output.cluster_iam_role_name (expand)" -> "[root] module.my-cluster.local.cluster_iam_role_name (expand)"
		"[root] module.my-cluster.output.cluster_id (expand)" -> "[root] module.my-cluster.data.http.wait_for_cluster (expand)"
		"[root] module.my-cluster.output.cluster_id (expand)" -> "[root] module.my-cluster.local.cluster_id (expand)"
		"[root] module.my-cluster.output.cluster_oidc_issuer_url (expand)" -> "[root] module.my-cluster.local.cluster_oidc_issuer_url (expand)"
		"[root] module.my-cluster.output.cluster_primary_security_group_id (expand)" -> "[root] module.my-cluster.local.cluster_primary_security_group_id (expand)"
		"[root] module.my-cluster.output.cluster_security_group_id (expand)" -> "[root] module.my-cluster.local.cluster_security_group_id (expand)"
		"[root] module.my-cluster.output.cluster_version (expand)" -> "[root] module.my-cluster.aws_eks_cluster.this (expand)"
		"[root] module.my-cluster.output.config_map_aws_auth (expand)" -> "[root] module.my-cluster.kubernetes_config_map.aws_auth (expand)"
		"[root] module.my-cluster.output.fargate_iam_role_arn (expand)" -> "[root] module.my-cluster.module.fargate.output.iam_role_arn (expand)"
		"[root] module.my-cluster.output.fargate_iam_role_name (expand)" -> "[root] module.my-cluster.module.fargate.output.iam_role_name (expand)"
		"[root] module.my-cluster.output.fargate_profile_arns (expand)" -> "[root] module.my-cluster.module.fargate.output.fargate_profile_arns (expand)"
		"[root] module.my-cluster.output.fargate_profile_ids (expand)" -> "[root] module.my-cluster.module.fargate.output.fargate_profile_ids (expand)"
		"[root] module.my-cluster.output.kubeconfig (expand)" -> "[root] module.my-cluster.data.http.wait_for_cluster (expand)"
		"[root] module.my-cluster.output.kubeconfig (expand)" -> "[root] module.my-cluster.local.kubeconfig (expand)"
		"[root] module.my-cluster.output.kubeconfig_filename (expand)" -> "[root] module.my-cluster.data.http.wait_for_cluster (expand)"
		"[root] module.my-cluster.output.kubeconfig_filename (expand)" -> "[root] module.my-cluster.local_file.kubeconfig (expand)"
		"[root] module.my-cluster.output.node_groups (expand)" -> "[root] module.my-cluster.module.node_groups.output.node_groups (expand)"
		"[root] module.my-cluster.output.oidc_provider_arn (expand)" -> "[root] module.my-cluster.aws_iam_openid_connect_provider.oidc_provider (expand)"
		"[root] module.my-cluster.output.security_group_rule_cluster_https_worker_ingress (expand)" -> "[root] module.my-cluster.aws_security_group_rule.cluster_https_worker_ingress (expand)"
		"[root] module.my-cluster.output.worker_iam_instance_profile_arns (expand)" -> "[root] module.my-cluster.aws_iam_instance_profile.workers (expand)"
		"[root] module.my-cluster.output.worker_iam_instance_profile_arns (expand)" -> "[root] module.my-cluster.aws_iam_instance_profile.workers_launch_template (expand)"
		"[root] module.my-cluster.output.worker_iam_instance_profile_names (expand)" -> "[root] module.my-cluster.aws_iam_instance_profile.workers (expand)"
		"[root] module.my-cluster.output.worker_iam_instance_profile_names (expand)" -> "[root] module.my-cluster.aws_iam_instance_profile.workers_launch_template (expand)"
		"[root] module.my-cluster.output.worker_iam_role_arn (expand)" -> "[root] module.my-cluster.aws_iam_role.workers (expand)"
		"[root] module.my-cluster.output.worker_iam_role_arn (expand)" -> "[root] module.my-cluster.data.aws_iam_instance_profile.custom_worker_group_iam_instance_profile (expand)"
		"[root] module.my-cluster.output.worker_iam_role_arn (expand)" -> "[root] module.my-cluster.data.aws_iam_instance_profile.custom_worker_group_launch_template_iam_instance_profile (expand)"
		"[root] module.my-cluster.output.worker_iam_role_name (expand)" -> "[root] module.my-cluster.aws_iam_role.workers (expand)"
		"[root] module.my-cluster.output.worker_iam_role_name (expand)" -> "[root] module.my-cluster.data.aws_iam_instance_profile.custom_worker_group_iam_instance_profile (expand)"
		"[root] module.my-cluster.output.worker_iam_role_name (expand)" -> "[root] module.my-cluster.data.aws_iam_instance_profile.custom_worker_group_launch_template_iam_instance_profile (expand)"
		"[root] module.my-cluster.output.worker_security_group_id (expand)" -> "[root] module.my-cluster.local.worker_security_group_id (expand)"
		"[root] module.my-cluster.output.workers_asg_arns (expand)" -> "[root] module.my-cluster.aws_autoscaling_group.workers (expand)"
		"[root] module.my-cluster.output.workers_asg_arns (expand)" -> "[root] module.my-cluster.aws_autoscaling_group.workers_launch_template (expand)"
		"[root] module.my-cluster.output.workers_asg_names (expand)" -> "[root] module.my-cluster.aws_autoscaling_group.workers (expand)"
		"[root] module.my-cluster.output.workers_asg_names (expand)" -> "[root] module.my-cluster.aws_autoscaling_group.workers_launch_template (expand)"
		"[root] module.my-cluster.output.workers_default_ami_id (expand)" -> "[root] module.my-cluster.local.default_ami_id_linux (expand)"
		"[root] module.my-cluster.output.workers_default_ami_id_windows (expand)" -> "[root] module.my-cluster.local.default_ami_id_windows (expand)"
		"[root] module.my-cluster.output.workers_launch_template_arns (expand)" -> "[root] module.my-cluster.aws_launch_template.workers_launch_template (expand)"
		"[root] module.my-cluster.output.workers_launch_template_ids (expand)" -> "[root] module.my-cluster.aws_launch_template.workers_launch_template (expand)"
		"[root] module.my-cluster.output.workers_launch_template_latest_versions (expand)" -> "[root] module.my-cluster.aws_launch_template.workers_launch_template (expand)"
		"[root] module.my-cluster.output.workers_user_data (expand)" -> "[root] module.my-cluster.local.launch_configuration_userdata_rendered (expand)"
		"[root] module.my-cluster.output.workers_user_data (expand)" -> "[root] module.my-cluster.local.launch_template_userdata_rendered (expand)"
		"[root] module.my-cluster.var.attach_worker_cni_policy (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.var.aws_auth_additional_labels (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.var.cluster_create_endpoint_private_access_sg_rule (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.var.cluster_create_security_group (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.var.cluster_create_timeout (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.var.cluster_delete_timeout (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.var.cluster_egress_cidrs (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.var.cluster_enabled_log_types (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.var.cluster_encryption_config (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.var.cluster_endpoint_private_access (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.var.cluster_endpoint_private_access_cidrs (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.var.cluster_endpoint_private_access_sg (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.var.cluster_endpoint_public_access (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.var.cluster_endpoint_public_access_cidrs (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.var.cluster_iam_role_name (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.var.cluster_log_kms_key_id (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.var.cluster_log_retention_in_days (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.var.cluster_name (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.var.cluster_security_group_id (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.var.cluster_service_ipv4_cidr (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.var.cluster_tags (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.var.cluster_update_timeout (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.var.cluster_version (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.var.create_eks (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.var.create_fargate_pod_execution_role (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.var.default_platform (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.var.eks_oidc_root_ca_thumbprint (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.var.enable_irsa (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.var.fargate_pod_execution_role_name (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.var.fargate_profiles (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.var.fargate_subnets (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.var.iam_path (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.var.kubeconfig_aws_authenticator_additional_args (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.var.kubeconfig_aws_authenticator_command (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.var.kubeconfig_aws_authenticator_command_args (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.var.kubeconfig_aws_authenticator_env_variables (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.var.kubeconfig_file_permission (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.var.kubeconfig_name (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.var.kubeconfig_output_path (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.var.manage_aws_auth (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.var.manage_cluster_iam_resources (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.var.manage_worker_iam_resources (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.var.map_accounts (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.var.map_roles (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.var.map_users (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.var.node_groups (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.var.node_groups_defaults (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.var.openid_connect_audiences (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.var.permissions_boundary (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.var.subnets (expand)" -> "[root] aws_subnet.PrivateAZA (expand)"
		"[root] module.my-cluster.var.subnets (expand)" -> "[root] aws_subnet.PublicAZA (expand)"
		"[root] module.my-cluster.var.subnets (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.var.tags (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.var.vpc_id (expand)" -> "[root] aws_vpc.terraformmain (expand)"
		"[root] module.my-cluster.var.vpc_id (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.var.wait_for_cluster_timeout (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.var.worker_additional_security_group_ids (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.var.worker_ami_name_filter (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.var.worker_ami_name_filter_windows (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.var.worker_ami_owner_id (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.var.worker_ami_owner_id_windows (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.var.worker_create_cluster_primary_security_group_rules (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.var.worker_create_initial_lifecycle_hooks (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.var.worker_create_security_group (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.var.worker_groups (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.var.worker_groups_launch_template (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.var.worker_security_group_id (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.var.worker_sg_ingress_from_port (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.var.workers_additional_policies (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.var.workers_egress_cidrs (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.var.workers_group_defaults (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.var.workers_role_name (expand)" -> "[root] module.my-cluster (expand)"
		"[root] module.my-cluster.var.write_kubeconfig (expand)" -> "[root] module.my-cluster (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] aws_codecommit_repository.staging (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] aws_efs_file_system.data (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] aws_efs_file_system.tools (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] aws_iam_role.clusteradmin (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] aws_instance.kitchensinkjenkins (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] aws_instance.monitoring (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] aws_instance.nodeserver (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] aws_instance.staging-landing (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] aws_instance.timeseriesdb (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] aws_instance.webserver (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] aws_instance.webservice-FE (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] aws_network_acl.all (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] aws_route_table_association.PrivateAZA (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] aws_route_table_association.PublicAZA (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] aws_s3_bucket.logs (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] aws_s3_bucket.monitor (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] aws_s3_bucket.templates (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] aws_security_group.Bastion (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.my-cluster.aws_autoscaling_group.workers (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.my-cluster.aws_autoscaling_group.workers_launch_template (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.my-cluster.aws_iam_openid_connect_provider.oidc_provider (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.my-cluster.aws_iam_role_policy_attachment.cluster_elb_sl_role_creation (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.my-cluster.module.fargate.aws_eks_fargate_profile.this (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.my-cluster.module.fargate.aws_iam_role_policy_attachment.eks_fargate_pod (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.my-cluster.module.node_groups.aws_eks_node_group.workers (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"]" -> "[root] var.aws_access_key"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"]" -> "[root] var.aws_secret_key"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"]" -> "[root] var.credentialsfile"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"]" -> "[root] var.region"
		"[root] provider[\"registry.terraform.io/hashicorp/cloudinit\"] (close)" -> "[root] module.my-cluster.module.node_groups.data.cloudinit_config.workers_userdata (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/kubernetes\"] (close)" -> "[root] module.my-cluster.kubernetes_config_map.aws_auth (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/kubernetes\"]" -> "[root] data.aws_eks_cluster.cluster (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/kubernetes\"]" -> "[root] data.aws_eks_cluster_auth.cluster (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/local\"] (close)" -> "[root] module.my-cluster.local_file.kubeconfig (expand)"
		"[root] provider[\"registry.terraform.io/terraform-aws-modules/http\"] (close)" -> "[root] module.my-cluster.data.http.wait_for_cluster (expand)"
		"[root] root" -> "[root] meta.count-boundary (EachMode fixup)"
		"[root] root" -> "[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)"
		"[root] root" -> "[root] provider[\"registry.terraform.io/hashicorp/cloudinit\"] (close)"
		"[root] root" -> "[root] provider[\"registry.terraform.io/hashicorp/kubernetes\"] (close)"
		"[root] root" -> "[root] provider[\"registry.terraform.io/hashicorp/local\"] (close)"
		"[root] root" -> "[root] provider[\"registry.terraform.io/terraform-aws-modules/http\"] (close)"
	}
}

